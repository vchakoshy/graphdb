// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: graphdb.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphdbClient is the client API for Graphdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphdbClient interface {
	GetFriendsOfFriends(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserSlice, error)
	AddFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
	RemoveFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
}

type graphdbClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphdbClient(cc grpc.ClientConnInterface) GraphdbClient {
	return &graphdbClient{cc}
}

func (c *graphdbClient) GetFriendsOfFriends(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserSlice, error) {
	out := new(UserSlice)
	err := c.cc.Invoke(ctx, "/service.Graphdb/GetFriendsOfFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphdbClient) AddFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := c.cc.Invoke(ctx, "/service.Graphdb/AddFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphdbClient) RemoveFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := c.cc.Invoke(ctx, "/service.Graphdb/RemoveFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphdbServer is the server API for Graphdb service.
// All implementations must embed UnimplementedGraphdbServer
// for forward compatibility
type GraphdbServer interface {
	GetFriendsOfFriends(context.Context, *User) (*UserSlice, error)
	AddFollow(context.Context, *Follow) (*Follow, error)
	RemoveFollow(context.Context, *Follow) (*Follow, error)
	mustEmbedUnimplementedGraphdbServer()
}

// UnimplementedGraphdbServer must be embedded to have forward compatible implementations.
type UnimplementedGraphdbServer struct {
}

func (UnimplementedGraphdbServer) GetFriendsOfFriends(context.Context, *User) (*UserSlice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsOfFriends not implemented")
}
func (UnimplementedGraphdbServer) AddFollow(context.Context, *Follow) (*Follow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (UnimplementedGraphdbServer) RemoveFollow(context.Context, *Follow) (*Follow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFollow not implemented")
}
func (UnimplementedGraphdbServer) mustEmbedUnimplementedGraphdbServer() {}

// UnsafeGraphdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphdbServer will
// result in compilation errors.
type UnsafeGraphdbServer interface {
	mustEmbedUnimplementedGraphdbServer()
}

func RegisterGraphdbServer(s grpc.ServiceRegistrar, srv GraphdbServer) {
	s.RegisterService(&Graphdb_ServiceDesc, srv)
}

func _Graphdb_GetFriendsOfFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphdbServer).GetFriendsOfFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Graphdb/GetFriendsOfFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphdbServer).GetFriendsOfFriends(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphdb_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphdbServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Graphdb/AddFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphdbServer).AddFollow(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graphdb_RemoveFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphdbServer).RemoveFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Graphdb/RemoveFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphdbServer).RemoveFollow(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

// Graphdb_ServiceDesc is the grpc.ServiceDesc for Graphdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Graphdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Graphdb",
	HandlerType: (*GraphdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendsOfFriends",
			Handler:    _Graphdb_GetFriendsOfFriends_Handler,
		},
		{
			MethodName: "AddFollow",
			Handler:    _Graphdb_AddFollow_Handler,
		},
		{
			MethodName: "RemoveFollow",
			Handler:    _Graphdb_RemoveFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graphdb.proto",
}
